AWSTemplateFormatVersion: '2010-09-09'
Description: Auto Scaling Lab with Apache Web Server

Parameters:
  VpcCidr:
    Description: CIDR block for the VPC
    Type: String
    Default: 10.0.0.0/16
  
  PublicSubnetCidr:
    Description: CIDR block for the public subnet
    Type: String
    Default: 10.0.1.0/24
  
  PrivateSubnetCidr:
    Description: CIDR block for the private subnet
    Type: String
    Default: 10.0.2.0/24

Resources:
  # VPC
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidr
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: AutoScalingLabVPC

  # Internet Gateway
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: AutoScalingLabIGW

  # Attach Internet Gateway to VPC
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  # Public Subnet
  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PublicSubnetCidr
      AvailabilityZone: !Select [0, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: AutoScalingLabPublicSubnet

  # Private Subnet
  PrivateSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PrivateSubnetCidr
      AvailabilityZone: !Select [0, !GetAZs '']
      Tags:
        - Key: Name
          Value: AutoScalingLabPrivateSubnet

  # Public Route Table
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: AutoScalingLabPublicRT

  # Public Route
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  # Associate Public Subnet with Public Route Table
  PublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet
      RouteTableId: !Ref PublicRouteTable

  # NAT Gateway in Public Subnet
  NatGatewayEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
    DependsOn: AttachGateway

  NatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGatewayEIP.AllocationId
      SubnetId: !Ref PublicSubnet
    DependsOn: PublicSubnetRouteTableAssociation

  # Private Route Table
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: AutoScalingLabPrivateRT

  # Private Route to NAT Gateway
  PrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway
    DependsOn: NatGateway

  # Associate Private Subnet with Private Route Table
  PrivateSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet
      RouteTableId: !Ref PrivateRouteTable

  # Security Group for ALB
  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for ALB
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: AutoScalingLabALBSG

  # Security Group for EC2 Instances
  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for EC2 instances
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !Ref ALBSecurityGroup
      Tags:
        - Key: Name
          Value: AutoScalingLabInstanceSG

  # Application Load Balancer
  ALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: AutoScalingLabALB
      Scheme: internet-facing
      Subnets:
        - !Ref PublicSubnet
      SecurityGroups:
        - !Ref ALBSecurityGroup
      Tags:
        - Key: Name
          Value: AutoScalingLabALB

  # ALB Target Group
  ALBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: AutoScalingLabTG
      Port: 80
      Protocol: HTTP
      VpcId: !Ref VPC
      HealthCheckPath: /
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2
      TargetType: instance

  # ALB Listener
  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ALBTargetGroup
      LoadBalancerArn: !Ref ALB
      Port: 80
      Protocol: HTTP

  # Launch Template
  LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: AutoScalingLabLT
      LaunchTemplateData:
        ImageId: ami-0c02fb55956c7d316  # Amazon Linux 2 AMI ID
        InstanceType: t2.micro
        SecurityGroupIds:
          - !GetAtt InstanceSecurityGroup.GroupId
        UserData:
          Fn::Base64: |
            #!/bin/bash
            yum update -y
            yum install -y httpd stress
            systemctl start httpd
            systemctl enable httpd
            
            # Create HTML page with JavaScript to fetch instance metadata
            cat > /var/www/html/index.html << 'EOF'
            <!DOCTYPE html>
            <html>
            <head>
                <title>Auto Scaling Lab</title>
                <style>
                    body { font-family: Arial, sans-serif; text-align: center; padding: 50px; }
                    .info { background-color: #f0f0f0; padding: 20px; border-radius: 10px; margin-bottom: 20px; }
                    .button { background-color: #ff6b6b; color: white; padding: 15px 32px; text-align: center; 
                            text-decoration: none; display: inline-block; font-size: 16px; margin: 4px 2px; 
                            cursor: pointer; border: none; border-radius: 5px; }
                </style>
            </head>
            <body>
                <div class="info">
                    <h1 id="instance-info">Loading instance information...</h1>
                    <p>This instance is part of an Auto Scaling Group</p>
                </div>
                <form action="/stress" method="post">
                    <button type="submit" class="button">Stress CPU</button>
                </form>
                
                <script>
                    // Fetch instance metadata from the metadata service
                    fetch('/instance-data')
                        .then(response => response.json())
                        .then(data => {
                            document.getElementById('instance-info').textContent = 
                                'Hello from ' + data.private_ip + ' / ' + data.instance_id;
                        })
                        .catch(error => {
                            console.error('Error fetching instance data:', error);
                            document.getElementById('instance-info').textContent = 
                                'Hello from Auto Scaling Instance';
                        });
                </script>
            </body>
            </html>
            EOF
            
            # Create endpoint to serve instance metadata
            cat > /var/www/html/instance-data << 'EOF'
            #!/bin/bash
            echo "Content-type: application/json"
            echo ""
            INSTANCE_ID=$(curl -s http://169.254.169.254/latest/meta-data/instance-id)
            PRIVATE_IP=$(curl -s http://169.254.169.254/latest/meta-data/local-ipv4)
            echo "{\"instance_id\": \"$INSTANCE_ID\", \"private_ip\": \"$PRIVATE_IP\"}"
            EOF
            
            # Create stress endpoint
            cat > /var/www/html/stress << 'EOF'
            #!/bin/bash
            echo "Content-type: text/html"
            echo ""
            echo "<!DOCTYPE html>"
            echo "<html><head><meta http-equiv='refresh' content='5;url=/'></head>"
            echo "<body><center><h1>Stressing CPU for 60 seconds...</h1></center></body>"
            echo "</html>"
            # Stress CPU for 60 seconds
            stress --cpu 1 --timeout 60 &
            EOF
            
            chmod +x /var/www/html/stress
            chmod +x /var/www/html/instance-data
            chown apache:apache /var/www/html/stress
            chown apache:apache /var/www/html/instance-data

  # Auto Scaling Group
  ASG:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: AutoScalingLabASG
      LaunchTemplate:
        LaunchTemplateId: !Ref LaunchTemplate
        Version: !GetAtt LaunchTemplate.LatestVersionNumber
      MinSize: 1
      MaxSize: 4
      DesiredCapacity: 1
      VPCZoneIdentifier:
        - !Ref PrivateSubnet
      TargetGroupARNs:
        - !Ref ALBTargetGroup
      Tags:
        - Key: Name
          Value: AutoScalingLabInstance
          PropagateAtLaunch: true

  # Scale-Up Policy
  ScaleUpPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref ASG
      Cooldown: 60
      ScalingAdjustment: 1
      PolicyType: SimpleScaling

  # CPU High Alarm
  CPUHighAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Alarm if CPU too high or metric disappears indicating instance is down
      AlarmActions:
        - !Ref ScaleUpPolicy
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: 60
      EvaluationPeriods: 1
      Threshold: 30
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: AutoScalingGroupName
          Value: !Ref ASG

Outputs:
  LoadBalancerDNS:
    Description: Load Balancer DNS Name
    Value: !GetAtt ALB.DNSName
    Export:
      Name: AutoScalingLabALBDNS